/home/pierre/Bureau/AOA//driver.c: 13 - 69
--------------------------------------------------------------------------------

13:     for (int i = 0; i < n; i++)
14:         for (int j = 0; j < n; j++)
15:             a[i][j] = -1.0 + ((float) rand() / (RAND_MAX/2));
16: }
17: 
18: static void init_array_1x (int n, double a[n]) {
19:     for (int i = 0; i < n; i++)
20:         a[i] = (double) rand() / 42;
21: }
22: 
23: int main (int argc, char *argv[]) {
24:     /* Check command line arguments. */
25:     if (argc != 4)
26:         return fprintf (stderr, "Usage: %s <size> <nb warmup repets> <nb measure repets>\n", argv[0]), 1;
27: 
28:     int i, m;
29: 
30:     /* Get command line arguments. */
31:     int size = atoi (argv[1]); /* Matrix size. */
32:     int repw = atoi (argv[2]); /* Repetition number for warmup. */
33:     int repm = atoi (argv[3]); /* Repetition number for measures. */
34: 
35:     for (m = 0; m < NB_METAS; m++) {
36:         /* Allocate arrays. */
37:         /* float (*a)[size] = malloc (size * size * sizeof *a[0]); */
38:         /* double *b        = malloc (size        * sizeof *b); */
39:         float (*a)[size] = 0; posix_memalign ((void **) &a, 64, size * size * sizeof *a[0]);
40:         double *b        = 0; posix_memalign ((void **) &b, 64, size        * sizeof *b);
41:         
42:         /* Init arrays. */
43:         srand(0);
44:         init_array_2x (size, a);
45:         init_array_1x (size, b);
46: 
47:         /* Warmup (repw repetitions in first meta, 1 repet in next metas). */
48:         if (m == 0) {
49:             for (i = 0; i < repw; i++)
50:                 baseline (size, a, b);
51:         } else {
52:             baseline (size, a, b);
53:         }
54:         
55:         /* Measure repm repetitions. */
56:         uint64_t t1 = rdtsc();
57:         for (i = 0; i < repm; i++)
58:             baseline (size, a, b);
59:         uint64_t t2 = rdtsc();
60: 
61:         /* Print performance (number of fused-multiply-exponential per cycle). */
62:         printf ("%.2f\n", (t2 - t1) / ((float) size * size * repm));
63: 
64:         /* Free arrays. */
65:         free (a);
66:         free (b);
67:     }
68:     return EXIT_SUCCESS;
69: }
