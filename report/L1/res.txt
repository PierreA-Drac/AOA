Nous avons testé le flag -Ofast qui permet d'activer des optimisation
mathémtiques qui ne respectent pas forcément certains standards. TODO Développer
le gain et la dangerosité si on ne peux pas vérifier la validité des calculs.
Options ciblées (ce qui consitue notre code) : fonctions inline, optimisations
sur les boucles, les mathématiques, les branchements.
Autres options testées mais sans gain ou gain néfatif par rapport à '-Ofast
-march=native' : -faggressive-loop-optimizations, -fbranch-probabilities,
-fdelayed-branch, -fexpensive-optimizations, -finline-functions, -floop-block,
-floop-interchange, -floop-unroll-and-jam, -funsafe-math-optimizations.
Avec gain : -funroll-all-loops.

Nous allons maintenant utiliser les outils MAQAO et Likwid pour expliquer les
différences de performances entre deux versions du code. Après nos tests avec
notre script, nous allons étudier les différences de performances entres la
version de référence "gcc -O2" et la version la plus rapide, "gcc -Ofast
-march=native -funroll-all-loops".
